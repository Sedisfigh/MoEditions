[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Randomize poker hands after RNG is set up
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.GAME.pseudorandom.hashed_seed = pseudohash(self.GAME.pseudorandom.seed)"
position = "after"
payload = '''
if G.GAME.modifiers.cry_misprint_min and not args.savetext then
    for k, v in pairs(G.GAME.hands) do
        v.chips = to_big(cry_format(v.chips * cry_log_random(pseudoseed('cry_misprint'),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2g"))
        v.mult = to_big(cry_format(v.mult * cry_log_random(pseudoseed('cry_misprint'),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2g"))
        v.l_chips = cry_format(v.l_chips * cry_log_random(pseudoseed('cry_misprint'),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2g")
        v.l_mult = cry_format(v.l_mult * cry_log_random(pseudoseed('cry_misprint'),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2g")
        v.s_chips = v.chips
        v.s_mult = v.mult
    end
end
'''
match_indent = true

# Packs
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "create_shop_card_ui(card, 'Booster', G.shop_booster)"
position = "before"
payload = '''
cry_misprintize(card)
'''
match_indent = true

# Prevent pack softlocks
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.pack_choices = self.config.center.config.choose or 1"
position = "after"
payload = '''
if G.GAME.modifiers.cry_misprint_min then
    G.GAME.pack_size = self.config.center.config.extra
    if G.GAME.pack_size < 1 then G.GAME.pack_size = 1 end
    self.ability.extra = G.GAME.pack_size
    G.GAME.pack_choices = math.min(math.floor(G.GAME.pack_size), G.GAME.pack_choices)
    --G.GAME.pack_choices = math.min(math.floor(G.GAME.pack_size),cry_format(G.GAME.pack_choices * cry_log_random(pseudoseed('cry_misprint_p'..G.GAME.round_resets.ante),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2f"))
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name:find('Arcana') then"
position = "before"
payload = '''
if self.ability.extra < 1 then self.ability.extra = 1 end
'''
match_indent = true

# Vouchers
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "create_shop_card_ui(card, 'Voucher', G.shop_vouchers)"
position = "before"
payload = '''
cry_misprintize(card)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "create_shop_card_ui(card, 'Voucher', G.shop_vouchers)"
position = "before"
payload = '''
cry_misprintize(card)
'''
match_indent = true

# Fractional Ante Bugs
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.GAME.round_resets.ante = G.GAME.round_resets.ante + mod"
position = "after"
payload = "G.GAME.round_resets.ante = Big and (to_big(G.GAME.round_resets.ante):floor():to_number()) or math.floor(G.GAME.round_resets.ante)"
match_indent = true

# UI Bugs
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "_size*G.CARD_W,"
position = "at"
payload = "math.max(1,math.min(_size,5))*G.CARD_W,"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "_size*G.CARD_W*1.1,"
position = "at"
payload = "math.max(1,math.min(_size,5))*G.CARD_W*1.1,"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "_size*G.CARD_W*1.1 + 0.5,"
position = "at"
payload = "math.max(1,math.min(_size,5))*G.CARD_W*1.1 + 0.5,"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{card_limit = _size, type = 'consumeable', highlight_limit = 1}"
position = "at"
payload = "{card_limit = math.max(1,_size), type = 'consumeable', highlight_limit = 1}"
match_indent = true

# Death and a CCD Patch
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.consumeable.mod_num >= #G.hand.highlighted and #G.hand.highlighted >= (self.ability.consumeable.min_highlighted or 1) then"
position = "at"
payload = "if (self.ability.consumeable.mod_num - (G.GAME.modifiers.cry_consumable_reduce and (self.ability.consumeable.mod_num > 1) and 1 or 0)) >= #G.hand.highlighted + (self.area == G.hand and -1 or 0) and #G.hand.highlighted + (self.area == G.hand and -1 or 0) >= 1 then"
match_indent = true

# mod_num has no limit
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.consumeable.mod_num = math.min(5, self.ability.consumeable.max_highlighted)"
position = "at"
payload = "self.ability.consumeable.mod_num = self.ability.consumeable.max_highlighted"
match_indent = true

# Infinite Deck
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "self.config.highlighted_limit = config.highlight_limit or 5"
position = "at"
payload = "self.config.highlighted_limit = config.highlight_limit or G.GAME.modifiers.cry_highlight_limit or 5"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > 5 then"
position = "at"
payload = "if #G.hand.highlighted <= (G.GAME.blind and G.GAME.blind.name == 'cry-Sapphire Stamp' and 1 or 0) or G.GAME.blind.block_play then"
match_indent = true

# Hieroglyph
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "ease_ante(-center_table.extra)"
position = "at"
payload = "ease_ante(math.floor(-center_table.extra))"
match_indent = true

# Consumables lying to you
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:use_consumeable(area, copier)"
position = "after"
payload = '''
if self.ability.set ~= "Gear" and not (self.ability.extra and type(self.ability.extra) == "table" and self.ability.extra.local_d6_sides) then --Ro-Balatro and D6 Jokers compat, I need a better system for this later
for k, v in pairs(G.P_CENTERS[self.config.center_key].config) do
        self.ability[k] = v --surely nothing will go wrong
    end
end'''
match_indent = true

# Vouchers lying to you
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'if self.ability.set == "Voucher" then'
position = "after"
payload = '''
for k, v in pairs(G.P_CENTERS[self.config.center_key].config) do
        self.ability[k] = v --surely nothing will go wrong
    end'''
match_indent = true

# Get Cryptid to display and work with card selections
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.name == 'Cryptid' then loc_vars = {_c.config.extra}"
position = "at"
payload = '''elseif _c.name == 'Cryptid' then loc_vars = {_c.config.extra, _c.config.max_highlighted}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'local _card = copy_card(G.hand.highlighted[1], nil, nil, G.playing_card)'
position = "at"
payload = '''
for q = 1, #G.hand.highlighted do
local _card = copy_card(G.hand.highlighted[q], nil, nil, G.playing_card)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "new_cards[#new_cards+1] = _card"
position = "after"
payload = "end"
match_indent = true

# Get seal spectrals to display and work with card selections
[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''
(?<indent>[\t ]*)elseif _c\.set == 'Spectral' then '''
position = 'after'
# match_indent = true
line_prepend = '$indent    '
payload = '''

if _c.name == 'Talisman' or _c.name == 'Medium' or _c.name == 'Trance' or _c.name == 'Deja Vu' then 
    loc_vars = {_c.config.max_highlighted}
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'local conv_card = G.hand.highlighted[1]'
position = "at"
payload = '''
for q = 1, #G.hand.highlighted do
local conv_card = G.hand.highlighted[q]
G.E_MANAGER:add_event(Event({func = function()
    play_sound('tarot1')
    used_tarot:juice_up(0.3, 0.5)
    return true end }))

G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.1,func = function()
    conv_card:set_seal(self.ability.extra, nil, true)
    return true end }))
end
delay(0.5)
G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))
end--[[
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Aura' then"
position = "before"
payload = "--]]"
match_indent = true

# Fractional pricing
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100))"
position = "after"
payload = '''if self.misprint_cost_fac then self.cost = cry_format(self.cost * self.misprint_cost_fac,'%.2f') 
if not G.GAME.modifiers.cry_misprint_min then self.cost = math.floor(self.cost) end end'''
match_indent = true