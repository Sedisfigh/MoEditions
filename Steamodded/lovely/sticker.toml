[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

### Sticker API

# generate_UIBox_ability_table()
[[patches]]
[patches.regex]
target = "card.lua"
pattern = "(?<indent>[\t ]*)if self.sticker then loc_vars = loc_vars or \\{\\}; loc_vars.sticker=self.sticker end"
position = "before"
line_prepend = "$indent"
payload = '''
for k, v in ipairs(SMODS.Sticker.obj_buffer) do
	if self.ability[v] then
        badges[#badges+1] = v
    end
end'''

# generate_card_ui()
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v == 'eternal' then*"
match_indent = true
position = "before"
payload = '''
local sticker = SMODS.Stickers[v]
if sticker and sticker.generate_ui ~= 0 then
    local t = { key = v, set = 'Other' }
    info_queue[#info_queue+1] = t
    if sticker.loc_vars and type(sticker.loc_vars) == 'function' then
        local res = sticker:loc_vars(info_queue, card) or {}
        t.vars = res.vars
        t.key = res.key or t.key
    end
else'''
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v == 'rental' then*"
match_indent = true
position = "after"
payload = '''end'''

# create_card()
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if card.ability.consumeable and not skip_materialize then card:start_materialize() end"
position = "after"
match_indent = true
payload = '''
for k, v in ipairs(SMODS.Sticker.obj_buffer) do
    local sticker = SMODS.Stickers[v]
    if
        sticker.sets[_type] and
        (
            -- is center compatible
            center[v..'_compat'] or -- explicit marker
            (sticker.default_compat and not sticker.compat_exceptions[center.key]) or -- default yes with no exception
            (not sticker.default_compat and sticker.compat_exceptions[center.key]) -- default no with exception
        ) and
        (not sticker.needs_enable_flag or G.GAME.modifiers['enable_'..v]) and
        pseudorandom((area == G.pack_cards and 'packssj' or 'shopssj')..v..G.GAME.round_resets.ante) > (1-sticker.rate)
    then
        sticker:set_sticker(card, true)
    end
end'''

# Game:start_up()
[[patches]]
[patches.regex]
target = "game.lua"
pattern = '''(?<indent>[\t ]*)boot_timer\('splash prep', 'end',1\)'''
position = "after"
line_prepend = "$indent"
payload = '''
for _, key in ipairs(SMODS.Sticker.obj_buffer) do
    local atlas = SMODS.Stickers[key].atlas
    local pos = SMODS.Stickers[key].pos
    self.shared_stickers[key] = Sprite(0, 0, self.CARD_W, self.CARD_H, self.ASSET_ATLAS[atlas] or self.ASSET_ATLAS['stickers'], pos)
end'''

# Card:draw()
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''(?<indent>[\t ]*)self:draw_boundingrect\(\)'''
position = "after"
line_prepend = "$indent"
payload = '''
--asdf
for k, v in pairs(SMODS.Stickers) do
    if self.ability[v.key] then
        if v and v.set_shader and type(v.set_shader) == 'function' then
            v:set_shader(self)
        else
            G.shared_stickers[v.key].role.draw_major = self
            G.shared_stickers[v.key]:draw_shader('dissolve', nil, nil, nil, self.children.center)
            G.shared_stickers[v.key]:draw_shader('voucher', nil, self.ARGS.send_to_shader, nil, self.children.center)
        end
    end
end'''

# Card:calculate_joker()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:calculate_joker(context)"
position = 'after'
payload = '''
for k, v in pairs(SMODS.Stickers) do
    if self.ability[v.key] then
        if v.calculate and type(v.calculate) == 'function' then
            v:calculate(self, context)
        end
    end
end'''
match_indent = true
